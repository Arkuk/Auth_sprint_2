"""empty message

Revision ID: 5852f91e376c
Revises:
Create Date: 2022-12-26 15:29:48.704277

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5852f91e376c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
                    sa.Column(
                        'id', postgresql.UUID(
                            as_uuid=True), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('name', sa.String(length=30), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('user',
                    sa.Column(
                        'id', postgresql.UUID(
                            as_uuid=True), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column(
                        'username', sa.String(
                            length=56), nullable=False),
                    sa.Column(
                        'password', sa.String(
                            length=256), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('username')
                    )
    op.create_table('social_account',
                    sa.Column(
                        'id', postgresql.UUID(
                            as_uuid=True), nullable=False),
                    sa.Column(
                        'user_id', postgresql.UUID(
                            as_uuid=True), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=True),
                    sa.Column('social_id', sa.Text(), nullable=False),
                    sa.Column('social_name', sa.Text(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id', 'social_name'),
                    sa.UniqueConstraint(
                        'social_id', 'social_name', name='social_pk'),
                    postgresql_partition_by='LIST (social_name)'
                    )
    op.execute("""CREATE TABLE IF NOT EXISTS "social_account_yandex" PARTITION OF "social_account" FOR VALUES IN ('yandex')""")
    op.execute(
        """CREATE TABLE IF NOT EXISTS "social_account_google" PARTITION OF "social_account" FOR VALUES IN ('vk')""")
    op.create_table('user_login_history',
                    sa.Column(
                        'id', postgresql.UUID(
                            as_uuid=True), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=True),
                    sa.Column(
                        'user_id', postgresql.UUID(
                            as_uuid=True), nullable=True),
                    sa.Column(
                        'user_agent', sa.String(
                            length=256), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('user_role',
                    sa.Column(
                        'id', postgresql.UUID(
                            as_uuid=True), nullable=False),
                    sa.Column(
                        'user_id', postgresql.UUID(
                            as_uuid=True), nullable=True),
                    sa.Column(
                        'role_id', postgresql.UUID(
                            as_uuid=True), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role')
    op.drop_table('user_login_history')
    op.drop_table('social_account')
    op.drop_table('user')
    op.drop_table('role')
    # ### end Alembic commands ###
